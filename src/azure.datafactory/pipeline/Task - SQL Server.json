{
	"name": "Task - SQL Server",
	"properties": {
		"activities": [
			{
				"name": "Log Success",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[audit].[activity_end]",
					"storedProcedureParameters": {
						"ActivityID": {
							"value": {
								"value": "@pipeline().parameters.activity_id",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"State": {
							"value": "Completed",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "control_database",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log Failure",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[audit].[activity_end]",
					"storedProcedureParameters": {
						"ActivityID": {
							"value": {
								"value": "@pipeline().parameters.activity_id",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"State": {
							"value": "Failed",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "control_database",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log Start",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[audit].[activity_start]",
					"storedProcedureParameters": {
						"ActivityID": {
							"value": {
								"value": "@pipeline().parameters.activity_id",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "control_database",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Copy data1",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Log Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "Select * from [audit].[activity]",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"tableOption": "autoCreate",
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "dataset_sqlServer",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "dependency"
						}
					}
				],
				"outputs": [
					{
						"referenceName": "dataset_sqlServer",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "dep"
						}
					}
				]
			}
		],
		"parameters": {
			"activity_id": {
				"type": "int",
				"defaultValue": 2
			}
		},
		"annotations": [],
		"lastPublishTime": "2024-06-13T18:18:14Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}